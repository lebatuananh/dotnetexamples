// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Blog.Domain.AggregatesModel.BlogAggregate;
using Blog.Domain.AggregatesModel.TagAggregate;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using BlogEntity = Blog.Domain.AggregatesModel.BlogAggregate.Blog;

#pragma warning disable 219, 612, 618
#nullable enable

namespace Blog.Api
{
    internal partial class BlogTagEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Blog.Domain.AggregatesModel.BlogAggregate.BlogTag",
                typeof(BlogTag),
                baseEntityType);

            var blogId = runtimeEntityType.AddProperty(
                "BlogId",
                typeof(Guid),
                propertyInfo: typeof(BlogTag).GetProperty("BlogId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BlogTag).GetField("<BlogId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            blogId.AddAnnotation("Relational:ColumnName", "blog_id");

            var tagId = runtimeEntityType.AddProperty(
                "TagId",
                typeof(Guid),
                propertyInfo: typeof(BlogTag).GetProperty("TagId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BlogTag).GetField("<TagId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            tagId.AddAnnotation("Relational:ColumnName", "tag_id");

            var key = runtimeEntityType.AddKey(
                new[] { blogId, tagId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "pk_blog_tag");

            var index = runtimeEntityType.AddIndex(
                new[] { tagId });
            index.AddAnnotation("Relational:Name", "ix_blog_tag_tag_id");

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("BlogId")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id")! })!,
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var blog = declaringEntityType.AddNavigation("Blog",
                runtimeForeignKey,
                onDependent: true,
                typeof(BlogEntity),
                propertyInfo: typeof(BlogTag).GetProperty("Blog", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BlogTag).GetField("<Blog>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var blogTags = principalEntityType.AddNavigation("BlogTags",
                runtimeForeignKey,
                onDependent: false,
                typeof(ISet<BlogTag>),
                propertyInfo: typeof(BlogEntity).GetProperty("BlogTags", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BlogEntity).GetField("<BlogTags>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "fk_blog_tag_blog_blog_id");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("TagId")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id")! })!,
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var tag = declaringEntityType.AddNavigation("Tag",
                runtimeForeignKey,
                onDependent: true,
                typeof(Tag),
                propertyInfo: typeof(BlogTag).GetProperty("Tag", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BlogTag).GetField("<Tag>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "fk_blog_tag_tags_tag_id");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", "blog");
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "blog_tag");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
