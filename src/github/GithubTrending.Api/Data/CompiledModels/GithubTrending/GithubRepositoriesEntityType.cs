// <auto-generated />
using System;
using System.Reflection;
using GithubTrending.Domain.AggregateModel.GithubRepositoriesAggregate;
using Microsoft.EntityFrameworkCore.Metadata;
using Shared.SeedWork;

#pragma warning disable 219, 612, 618
#nullable enable

namespace GithubTrending.Api
{
    internal partial class GithubRepositoriesEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "GithubTrending.Domain.AggregateModel.GithubRepositoriesAggregate.GithubRepositories",
                typeof(GithubRepositories),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(Guid),
                propertyInfo: typeof(Entity).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Entity).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.AddAnnotation("Relational:ColumnName", "id");
            id.AddAnnotation("Relational:ColumnType", "uuid");
            id.AddAnnotation("Relational:DefaultValueSql", "uuid_generate_v4()");

            var createdBy = runtimeEntityType.AddProperty(
                "CreatedBy",
                typeof(string),
                propertyInfo: typeof(ModifierTrackingEntity).GetProperty("CreatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ModifierTrackingEntity).GetField("<CreatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            createdBy.AddAnnotation("Relational:ColumnName", "created_by");

            var createdById = runtimeEntityType.AddProperty(
                "CreatedById",
                typeof(Guid),
                propertyInfo: typeof(ModifierTrackingEntity).GetProperty("CreatedById", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ModifierTrackingEntity).GetField("<CreatedById>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            createdById.AddAnnotation("Relational:ColumnName", "created_by_id");

            var createdDate = runtimeEntityType.AddProperty(
                "CreatedDate",
                typeof(DateTimeOffset),
                propertyInfo: typeof(DateTrackingEntity).GetProperty("CreatedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DateTrackingEntity).GetField("<CreatedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            createdDate.AddAnnotation("Relational:ColumnName", "created_date");

            var description = runtimeEntityType.AddProperty(
                "Description",
                typeof(string),
                propertyInfo: typeof(GithubRepositories).GetProperty("Description", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GithubRepositories).GetField("<Description>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            description.AddAnnotation("Relational:ColumnName", "description");

            var forkCount = runtimeEntityType.AddProperty(
                "ForkCount",
                typeof(string),
                propertyInfo: typeof(GithubRepositories).GetProperty("ForkCount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GithubRepositories).GetField("<ForkCount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            forkCount.AddAnnotation("Relational:ColumnName", "fork_count");

            var language = runtimeEntityType.AddProperty(
                "Language",
                typeof(string),
                propertyInfo: typeof(GithubRepositories).GetProperty("Language", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GithubRepositories).GetField("<Language>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            language.AddAnnotation("Relational:ColumnName", "language");

            var lastUpdatedBy = runtimeEntityType.AddProperty(
                "LastUpdatedBy",
                typeof(string),
                propertyInfo: typeof(ModifierTrackingEntity).GetProperty("LastUpdatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ModifierTrackingEntity).GetField("<LastUpdatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            lastUpdatedBy.AddAnnotation("Relational:ColumnName", "last_updated_by");

            var lastUpdatedById = runtimeEntityType.AddProperty(
                "LastUpdatedById",
                typeof(Guid),
                propertyInfo: typeof(ModifierTrackingEntity).GetProperty("LastUpdatedById", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ModifierTrackingEntity).GetField("<LastUpdatedById>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            lastUpdatedById.AddAnnotation("Relational:ColumnName", "last_updated_by_id");

            var lastUpdatedDate = runtimeEntityType.AddProperty(
                "LastUpdatedDate",
                typeof(DateTimeOffset),
                propertyInfo: typeof(DateTrackingEntity).GetProperty("LastUpdatedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DateTrackingEntity).GetField("<LastUpdatedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            lastUpdatedDate.AddAnnotation("Relational:ColumnName", "last_updated_date");

            var owner = runtimeEntityType.AddProperty(
                "Owner",
                typeof(string),
                propertyInfo: typeof(GithubRepositories).GetProperty("Owner", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GithubRepositories).GetField("<Owner>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            owner.AddAnnotation("Relational:ColumnName", "owner");

            var ownersTwitterAccount = runtimeEntityType.AddProperty(
                "OwnersTwitterAccount",
                typeof(string),
                propertyInfo: typeof(GithubRepositories).GetProperty("OwnersTwitterAccount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GithubRepositories).GetField("<OwnersTwitterAccount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            ownersTwitterAccount.AddAnnotation("Relational:ColumnName", "owners_twitter_account");

            var repository = runtimeEntityType.AddProperty(
                "Repository",
                typeof(string),
                propertyInfo: typeof(GithubRepositories).GetProperty("Repository", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GithubRepositories).GetField("<Repository>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            repository.AddAnnotation("Relational:ColumnName", "repository");

            var starCount = runtimeEntityType.AddProperty(
                "StarCount",
                typeof(string),
                propertyInfo: typeof(GithubRepositories).GetProperty("StarCount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GithubRepositories).GetField("<StarCount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            starCount.AddAnnotation("Relational:ColumnName", "star_count");

            var statusGithubTrending = runtimeEntityType.AddProperty(
                "StatusGithubTrending",
                typeof(StatusGithubTrending),
                propertyInfo: typeof(GithubRepositories).GetProperty("StatusGithubTrending", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GithubRepositories).GetField("<StatusGithubTrending>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            statusGithubTrending.AddAnnotation("Relational:ColumnName", "status_github_trending");

            var todayStarCount = runtimeEntityType.AddProperty(
                "TodayStarCount",
                typeof(string),
                propertyInfo: typeof(GithubRepositories).GetProperty("TodayStarCount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GithubRepositories).GetField("<TodayStarCount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            todayStarCount.AddAnnotation("Relational:ColumnName", "today_star_count");

            var url = runtimeEntityType.AddProperty(
                "Url",
                typeof(string),
                propertyInfo: typeof(GithubRepositories).GetProperty("Url", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GithubRepositories).GetField("<Url>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            url.AddAnnotation("Relational:ColumnName", "url");

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "pk_github_trending");

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", "github_repositories");
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "github_trending");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
