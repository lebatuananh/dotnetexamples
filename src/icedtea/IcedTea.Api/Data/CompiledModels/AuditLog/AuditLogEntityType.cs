// <auto-generated />
using System;
using System.Reflection;
using AuditLogging.EntityFramework.Entities;
using Microsoft.EntityFrameworkCore.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable enable

namespace IcedTea.Api
{
    internal partial class AuditLogEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "AuditLogging.EntityFramework.Entities.AuditLog",
                typeof(AuditLog),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(AuditLog).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AuditLog).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            id.AddAnnotation("Relational:ColumnName", "id");

            var action = runtimeEntityType.AddProperty(
                "Action",
                typeof(string),
                propertyInfo: typeof(AuditLog).GetProperty("Action", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AuditLog).GetField("<Action>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            action.AddAnnotation("Relational:ColumnName", "action");

            var category = runtimeEntityType.AddProperty(
                "Category",
                typeof(string),
                propertyInfo: typeof(AuditLog).GetProperty("Category", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AuditLog).GetField("<Category>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            category.AddAnnotation("Relational:ColumnName", "category");

            var created = runtimeEntityType.AddProperty(
                "Created",
                typeof(DateTime),
                propertyInfo: typeof(AuditLog).GetProperty("Created", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AuditLog).GetField("<Created>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            created.AddAnnotation("Relational:ColumnName", "created");

            var data = runtimeEntityType.AddProperty(
                "Data",
                typeof(string),
                propertyInfo: typeof(AuditLog).GetProperty("Data", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AuditLog).GetField("<Data>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            data.AddAnnotation("Relational:ColumnName", "data");

            var @event = runtimeEntityType.AddProperty(
                "Event",
                typeof(string),
                propertyInfo: typeof(AuditLog).GetProperty("Event", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AuditLog).GetField("<Event>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            @event.AddAnnotation("Relational:ColumnName", "event");

            var source = runtimeEntityType.AddProperty(
                "Source",
                typeof(string),
                propertyInfo: typeof(AuditLog).GetProperty("Source", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AuditLog).GetField("<Source>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            source.AddAnnotation("Relational:ColumnName", "source");

            var subjectAdditionalData = runtimeEntityType.AddProperty(
                "SubjectAdditionalData",
                typeof(string),
                propertyInfo: typeof(AuditLog).GetProperty("SubjectAdditionalData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AuditLog).GetField("<SubjectAdditionalData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            subjectAdditionalData.AddAnnotation("Relational:ColumnName", "subject_additional_data");

            var subjectIdentifier = runtimeEntityType.AddProperty(
                "SubjectIdentifier",
                typeof(string),
                propertyInfo: typeof(AuditLog).GetProperty("SubjectIdentifier", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AuditLog).GetField("<SubjectIdentifier>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            subjectIdentifier.AddAnnotation("Relational:ColumnName", "subject_identifier");

            var subjectName = runtimeEntityType.AddProperty(
                "SubjectName",
                typeof(string),
                propertyInfo: typeof(AuditLog).GetProperty("SubjectName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AuditLog).GetField("<SubjectName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            subjectName.AddAnnotation("Relational:ColumnName", "subject_name");

            var subjectType = runtimeEntityType.AddProperty(
                "SubjectType",
                typeof(string),
                propertyInfo: typeof(AuditLog).GetProperty("SubjectType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AuditLog).GetField("<SubjectType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            subjectType.AddAnnotation("Relational:ColumnName", "subject_type");

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "pk_audit_log");

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", "auditlog");
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "audit_log");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
