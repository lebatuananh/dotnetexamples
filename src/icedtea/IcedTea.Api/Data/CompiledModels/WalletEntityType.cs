// <auto-generated />
using System;
using System.Reflection;
using IcedTea.Domain.AggregateModel.CustomerAggregate;
using Microsoft.EntityFrameworkCore.Metadata;
using Shared.SeedWork;

#pragma warning disable 219, 612, 618
#nullable enable

namespace IcedTead.Api
{
    internal partial class WalletEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "IcedTea.Domain.AggregateModel.CustomerAggregate.Wallet",
                typeof(Wallet),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(Guid),
                propertyInfo: typeof(Entity).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Entity).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.AddAnnotation("Relational:ColumnName", "id");
            id.AddAnnotation("Relational:ColumnType", "uuid");
            id.AddAnnotation("Relational:DefaultValueSql", "uuid_generate_v4()");

            var createdDate = runtimeEntityType.AddProperty(
                "CreatedDate",
                typeof(DateTimeOffset),
                propertyInfo: typeof(DateTrackingEntity).GetProperty("CreatedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DateTrackingEntity).GetField("<CreatedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            createdDate.AddAnnotation("Relational:ColumnName", "created_date");

            var lastUpdatedDate = runtimeEntityType.AddProperty(
                "LastUpdatedDate",
                typeof(DateTimeOffset),
                propertyInfo: typeof(DateTrackingEntity).GetProperty("LastUpdatedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DateTrackingEntity).GetField("<LastUpdatedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            lastUpdatedDate.AddAnnotation("Relational:ColumnName", "last_updated_date");

            var subTotalAmount = runtimeEntityType.AddProperty(
                "SubTotalAmount",
                typeof(decimal),
                propertyInfo: typeof(Wallet).GetProperty("SubTotalAmount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Wallet).GetField("<SubTotalAmount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd);
            subTotalAmount.AddAnnotation("Relational:ColumnName", "sub_total_amount");
            subTotalAmount.AddAnnotation("Relational:DefaultValue", 0m);

            var totalAmount = runtimeEntityType.AddProperty(
                "TotalAmount",
                typeof(decimal),
                propertyInfo: typeof(Wallet).GetProperty("TotalAmount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Wallet).GetField("<TotalAmount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd);
            totalAmount.AddAnnotation("Relational:ColumnName", "total_amount");
            totalAmount.AddAnnotation("Relational:DefaultValue", 0m);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "pk_wallet");

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", "icedtea");
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "wallet");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
